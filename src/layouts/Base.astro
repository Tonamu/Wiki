---
import Navbar from "../components/Navbar.astro";
import Navigation from "../components/Navigation.astro";
import Footer from "../components/Footer.astro";
import {
  SITE_TITLE,
  SITE_DESCRIPTION,
  SITE_DEFAULT_OG_IMAGE,
} from "../site_config";
import "@/styles/globals.css";
import { ViewTransitions } from "astro:transitions";

export interface Props {
  /** Title of the page */
  title?: string;
  /** Description of the page */
  description?: string;
  /** OpenGraph thumbnail of the page */
  thumbnail?: {
    /** URL of the thumbnail */
    src: string;
    /** Alt text of the thumbnail */
    alt: string;
  };
  /** Canonical URL of the page */
  canonical?: string;
}

const {
  title = SITE_TITLE,
  description = SITE_DESCRIPTION,
  thumbnail = {
    src: SITE_DEFAULT_OG_IMAGE,
    alt: SITE_TITLE,
  },
  canonical,
} = Astro.props;
---

<!doctype html>
<html lang="en" class="scroll-pt-16">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    {canonical && <link rel="canonical" href={canonical} />}

    <meta property="og:title" content={title} />
    <meta property="og:type" content="website" />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={thumbnail.src} />
    <meta property="og:url" content={Astro.request.url} />
    <meta name="twitter:card" content="summary_large_image" />
    <ViewTransitions />
    <script is:inline>
      const setTheme = () => {
        const theme = (() => {
          if (
            typeof localStorage !== "undefined" &&
            localStorage.getItem("theme")
          ) {
            return localStorage.getItem("theme");
          }
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            return "dark";
          }
          return "light";
        })();

        if (theme === "light") {
          document.documentElement.classList.remove("dark");
        } else {
          document.documentElement.classList.add("dark");
        }
        window.localStorage.setItem("theme", theme ?? "light");
      };
      setTheme();
      document.addEventListener("astro:page-load", () => {
        setTheme();
      });
    </script>
  </head>

  <body class="bg-background scroll-smooth dark:[color-scheme:dark]">
    <Navigation />
    <div
      class="container flex-1 items-start md:grid md:grid-cols-[220px_minmax(0,1fr)] md:gap-6 lg:grid-cols-[240px_minmax(0,1fr)] lg:gap-10 min-h-screen"
    >
      <aside
        class="fixed hidden top-16 h-[calc(100vh-4rem)] w-full md:sticky md:block"
      >
        <Navbar transition:persist />
      </aside>
      <div class="relative py-6 lg:py-8">
        <slot />
      </div>
    </div>
    <Footer />
    <style>
      @tailwind base;
      @tailwind components;
      @tailwind utilities;

      @layer base {
        :root {
          --background: 0 0% 100%;
          --foreground: 240 10% 3.9%;
          --card: 0 0% 100%;
          --card-foreground: 240 10% 3.9%;
          --popover: 0 0% 100%;
          --popover-foreground: 240 10% 3.9%;
          --primary: 240 5.9% 10%;
          --primary-foreground: 0 0% 98%;
          --secondary: 240 4.8% 95.9%;
          --secondary-foreground: 240 5.9% 10%;
          --muted: 240 4.8% 95.9%;
          --muted-foreground: 240 3.8% 46.1%;
          --accent: 240 4.8% 95.9%;
          --accent-foreground: 240 5.9% 10%;
          --destructive: 0 72.22% 50.59%;
          --destructive-foreground: 0 0% 98%;
          --border: 240 5.9% 90%;
          --input: 240 5.9% 90%;
          --ring: 240 5% 64.9%;
          --radius: 0.5rem;
        }

        .dark {
          --background: 240 10% 3.9%;
          --foreground: 0 0% 98%;
          --card: 240 10% 3.9%;
          --card-foreground: 0 0% 98%;
          --popover: 240 10% 3.9%;
          --popover-foreground: 0 0% 98%;
          --primary: 0 0% 98%;
          --primary-foreground: 240 5.9% 10%;
          --secondary: 240 3.7% 15.9%;
          --secondary-foreground: 0 0% 98%;
          --muted: 240 3.7% 15.9%;
          --muted-foreground: 240 5% 64.9%;
          --accent: 240 3.7% 15.9%;
          --accent-foreground: 0 0% 98%;
          --destructive: 0 62.8% 30.6%;
          --destructive-foreground: 0 85.7% 97.3%;
          --border: 240 3.7% 15.9%;
          --input: 240 3.7% 15.9%;
          --ring: 240 4.9% 83.9%;
        }
      }

      @layer base {
        body {
          background-color: hsl(var(--background));
          color: hsl(var(--foreground));
          font-synthesis-weight: none;
          text-rendering: optimizeLegibility;
        }
      }
    </style>
  </body>
</html>
