---
import type { MarkdownHeading } from "astro";
import Layout from "./Base.astro";
import { TagsDisplay } from "@/components/TagsDisplay";
import { ScrollArea } from "@/components/ui/scroll-area";

export interface Props {
  headings: MarkdownHeading[];
  frontmatter: any;
}

const { frontmatter, headings } = Astro.props;
---

<Layout title={frontmatter.title} description={frontmatter.description}>
  <main class="relative xl:grid xl:grid-cols-[1fr_300px]">
    <div data-pagefind-body class="prose dark:prose-invert">
      <h1>{frontmatter.title}</h1>
      <TagsDisplay tags={frontmatter.tags ?? []} />
      <slot />
    </div>
    <div
      class="hidden xl:block text-sm sticky top-16 h-[calc(100vh-4rem)] pt-4"
    >
      {
        headings.length > 0 && (
          <ScrollArea className="h-full pb-4" client:visible>
            <p class="font-semibold">On this page</p>
            <ul class="list-none">
              {headings
                .filter((h) => h.depth < 4)
                .map((heading) => (
                  <li class="pt-2">
                    <a class="text-muted-foreground" href={`#${heading.slug}`}>
                      {heading.text}
                    </a>
                  </li>
                ))}
            </ul>
          </ScrollArea>
        )
      }
    </div>
  </main>
</Layout>

<script is:inline>
  document.addEventListener("astro:page-load", () => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const id = entry.target.id;
        const header = document.querySelector(`a[href="#${id}"]`);
        if (header === null) {
          console.log(id);
          return;
        }

        if (entry.intersectionRatio > 0) {
          header.classList.add("text-foreground");
          header.classList.remove("text-muted-foreground");
        } else {
          header.classList.remove("text-foreground");
          header.classList.add("text-muted-foreground");
        }
      });
    });

    document.querySelectorAll("section").forEach((section) => {
      observer.observe(section);
    });

    // Make headers clickable
    document.querySelectorAll('h2, h3, h4, h5, h6').forEach(heading => {
      if (heading.id) {
        heading.style.cursor = 'pointer';
        heading.addEventListener('click', () => {
          window.location.hash = heading.id;
        });
        
        // Add link icon on hover (only if it doesn't already exist)
        if (!heading.querySelector('.group')) {
          const linkIcon = document.createElement('span');
          linkIcon.innerHTML = ' <svg class="inline-block h-4 w-4 opacity-0 group-hover:opacity-100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path></svg>';
          heading.classList.add('group');
          heading.appendChild(linkIcon);
        }
      }
    });

  });
</script>
