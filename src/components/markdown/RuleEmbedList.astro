---
import RuleEmbed from "@/components/markdown/RuleEmbed.astro";
import { EntryType, type RuleFields } from "@/content/config";
import { getCollection } from "astro:content";

let rules = await getCollection("rules");

interface Props {
  entry_type: (typeof EntryType)[number] | "All";
  rule_context?: string;
  fields?: RuleFields[] | "All";
  excluded_ids: number[];
}

const { entry_type, rule_context, fields, excluded_ids } = Astro.props;

if (excluded_ids) {
  rules = rules.filter(rule => !excluded_ids.includes(rule.data.id));
}
if (entry_type !== "All") {
  rules = rules.filter(rule => {
    const ruleEntryType = rule.data.entry_type;

    if (ruleEntryType === "All") {
      return true;
    }

    if (Array.isArray(ruleEntryType)) {
      return ruleEntryType.includes(entry_type);
    }

    return false;
  });
}

if (rule_context) {
  rules = rules.filter(rule => rule.data.rule_context === rule_context);
}

rules.sort((a, b) => a.data.id - b.data.id);
---

{
  rules.map((rule: { slug: string | undefined }) => (
    <RuleEmbed
      rule={rule.slug}
      fields={fields}
    />
  ))
}
