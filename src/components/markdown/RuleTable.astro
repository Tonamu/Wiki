---
import { getCollection, type CollectionEntry } from "astro:content";
const ruleEntries: CollectionEntry<"rules">[] = await getCollection("rules");

const ISO_date = (date: Date): string => {
  return date.toISOString().split("T")[0];
};
---


<div class="table-container">
  <table class="rule-table sortable">
    <thead>
      <tr>
        <th>ID</th>
        <th>Date</th>
        <th>Name</th>
        <th>E.Type</th>
        <th>E.Status</th>
        <th>Occurrence</th>
        <th>Checked</th>
        <th>List</th>
      </tr>
    </thead>
    <tbody>
      {
        ruleEntries
          .filter(rule => rule.data.status === "Active")
          .sort((a, b) => a.data.id - b.data.id)
          .map((rule, slug) => (
            <tr>
              <td>{rule.data.id}</td>
              <td>{(rule.data.date_modified && ISO_date(rule.data.date_modified)) || (rule.data.date_created && ISO_date(rule.data.date_created))}</td>
              <td class="rule-name">
                <a href={`/rules/${rule.slug}`}>{rule.data.name}</a>
              </td>
              <td>
                <span class="entry-type">
                  {Array.isArray(rule.data.entry_type) ?
                    rule.data.entry_type.join(", ")
                  : rule.data.entry_type}
                </span>
              </td>
              <td>
                <span
                  class={`entry-status-badge entry-status-${rule.data.entry_status.toLowerCase()}`}>
                  {rule.data.entry_status}
                </span>
              </td>
              <td>{rule.data.occurance || "-"}</td>
              <td>{(rule.data.date_checked && ISO_date(rule.data.date_checked)) || "-"}</td>
              <td>
                {rule.data.edit_list ?
                  rule.data.edit_list === "TODO" ? "TODO" : <a href={rule.data.edit_list}>Link</a>
                : "-"}
              </td>
            </tr>
          ))
      }
    </tbody>
  </table>
</div>
