---
import type { RuleFields } from "@/content/config";
import { getEntry } from "astro:content";

interface Props {
  rule: string;
  fields?: RuleFields[] | "All";
}

const { rule: ruleName, fields = [] } = Astro.props;
const ruleEntry = await getEntry("rules", ruleName);
const ruleData = ruleEntry?.data;

if (!ruleData) return;

/* Skipped fields:
- name (always displayed)
- status (always displayed if Deprecated)
- detection_script
- be_validations
- rationale
*/

const shouldShowField = (fieldName: RuleFields): boolean => {
  return fields === "All" || fields.includes(fieldName);
};

const shouldShowGroup = (groupFields: RuleFields[]): boolean => {
  return fields === "All" || groupFields.some(field => fields.includes(field));
};
---

{
  (
    <div class="rounded-xl border shadow p-6">
      <div>
        <h3 class="mt-0">
          Rule: 
          <a href={`/rules/${ruleEntry.slug}`}> {ruleData.name}</a>
          {shouldShowField("id") && ` (id=${ruleData.id})`}
        </h3>
        
        {ruleData.status == "Deprecated" && (
          <p class="text-red-500">
            ⚠️ This rule has been deprecated{" "}
            {ruleData.date_modified && `(${ruleData.date_modified})`}
          </p>
        )}
        
        {shouldShowGroup(["entry_status", "entry_type"]) && (
          <span>
            (Applies to all
            {(
              <em>
                {ruleData.entry_status !== "Draft" &&
                  ruleData.entry_status.toLowerCase()}
              </em>
            )}{" "}
            {ruleData.entry_type !== "All" &&
              ruleData.entry_type
                .map(str => str.toLowerCase().replace(/s$/, ""))
                .join(" & ")}
            entries)
          </span>
        )}
        
        {shouldShowGroup(["date_created", "date_modified"]) && (
          <>
            {ruleData.date_created && <p>Rule created {ruleData.date_created}</p>}
            {ruleData.date_modified && <p>Rule modified {ruleData.date_modified}</p>}
          </>
        )}

        {shouldShowField("fe_validations") && ruleData.fe_validations && (
          <p>
            Frontend validation with:{" "}
            <a
              href={`https://github.com/search?type=code&q=repo%3AVocaDB%2Fvocadb+Validation+${ruleData.fe_validations}`}>
              {ruleData.fe_validations}
            </a>
          </p>
        )}
        
        {shouldShowGroup(["occurance", "edit_list", "date_checked"]) && (ruleData.occurance ?? 0) > 0 && (
          <p>
            {`~${ruleData.occurance} affected entries`}
            {ruleData.edit_list && (
              <span>
                : <a href={ruleData.edit_list}>Edit list</a>
                {ruleData.date_checked && ` updated ${ruleData.date_checked}`}
              </span>
            )}
          </p>
        )}
      </div>
    </div>
  )
}