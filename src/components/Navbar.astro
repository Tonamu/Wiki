---
import { ChevronDownIcon, ChevronUpIcon } from "@radix-ui/react-icons";
import {
  posts,
  getParent,
  groupedNavbarParents,
  navbarParents,
} from "./navigationConfig";
import { ScrollArea } from "./ui/scroll-area";
---

<ScrollArea client:visible className="py-6 pr-6 h-full">
  {
    navbarParents
      .map((i) => {
        return {
          navbarItem: i,
          parentEntry: posts.find(
            (p) => p.params.slug === i.title.toLowerCase()
          )!,
        };
      })
      .map(({ navbarItem, parentEntry }) => (
        <div class="pb-4">
          <p
            class="text-sm font-semibold"
          >
            {parentEntry.props.entry.data.title}
          </p>
          <div class="grid grid-flow-row auto-rows-max text-sm mt-1 w-5/6">
            {navbarItem.subcategories !== undefined &&
              navbarItem.subcategories.length > 0 && (
                <>
                  {navbarItem.subcategories.map((c) => (
                    <div>
                      <div
                        class="collapsibleNav group flex flex-row items-center gap-1 peer text-muted-foreground hover:underline cursor-pointer py-1"
                        data-state="closed"
                      >
                        {c}
                        <ChevronDownIcon className="group-data-[state=closed]:block hidden" />
                        <ChevronUpIcon className="group-data-[state=closed]:hidden" />
                      </div>
                      <div class="peer-data-[state=open]:grid hidden text-muted-foreground py-1 ml-4">
                        {groupedNavbarParents[c]?.map((post) => (
                          <a
                            class="hover:underline py-1"
                            href={[
                              "/docs",
                              post.params.slug,
                            ].join("/")}
                          >
                            {post.props.entry.data.title}
                          </a>
                        ))}
                      </div>
                    </div>
                  ))}
                </>
              )}
            {groupedNavbarParents[parentEntry.props.entry.data.title]?.map(
              (post) => (
                <a
                  class="text-muted-foreground hover:underline py-1"
                  href={[
                    "/docs",
                    post.params.slug,
                  ].join("/")}
                >
                  {post.props.entry.data.title}
                </a>
              )
            )}
          </div>
        </div>
      ))
  }
</ScrollArea>

<script>
  document.addEventListener("astro:page-load", () => {
    const collapsibleButtons = document.querySelectorAll(".collapsibleNav");
    for (const button of collapsibleButtons) {
      const key = `expanded:${button.textContent}`;
      const lastState = localStorage.getItem(key);
      if (lastState === "open") {
        button.setAttribute("data-state", "open");
      }
      button.addEventListener("click", () => {
        const newState =
          button.getAttribute("data-state") === "closed" ? "open" : "closed";
        button.setAttribute("data-state", newState);
        localStorage.setItem(key, newState);
      });
    }
  });
</script>
